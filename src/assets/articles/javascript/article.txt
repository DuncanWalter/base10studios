<p>After an awkward adolencence, JavaScript has emerged as a premier language. However, when compared to it's contemporaries in popularity--namely Java, Python, and the Cs--Javascript appears as alien as ever. It is uncompiled like Python, as flexible as C++, and creeping close to Java-class performance. Its mixure of dynamic typing, map-based objects, and functional tropes form a language of paradoxes: It's vocabulary is tiny, yet its code terse. Its concepts are easily tought, yet its depths are elusive.</p>

<p>JavaScript is, at the very least, a fantastic educational tool; it is as widely accessible as it is broadly applicable. Anyone with a browser is equipped with a live JavaScript environment akin to Python's IDLE, making it supremely available. As a bonus, anyone with a text editor can make console applications that run in-browser- these are great projects for beginners. The quick turnaround of an uncompiled language and lack of type errors are also good perks for novices. JavaScript's other main strength is the sheer breadth of exposure it provides. It has high-level OOP complete with inheritence. It has the capacity for both concurrent and asynchronous processes. It has first class functions and fits naturally into the functional paradigm. It is now used widely for everthing from serving websites to rendering graphics atop its traditional scripting roles. As far as first languages go, JavaScript is a strong contender.</p>

<p>As a professional language, JavaScript is made practical by a growing catagory of developement tools that smooth over the rough patches of the language. Mostly, that means compensating for the lack of native imports and exports in legacy JavaScript, and mitigating the natural downsides of its dynamic typing. Package managers and transpilers have come up with a number of ways to adress these issues. In fact, there might be too many solutions- my number one complaint working with professional JavaScript has to be choosing which tools to use, or even which tools will work nicely together. The sheer rigidity of Java and relative youth of Python seems to have protected them from this pitfall. That being said, JavaScript seems better off than C++ on that front. Anymore, the tradisional--and often cited--chinks in JavaScript's armor are closed. It runs quickly and reliably- the key difference is that it runs everywhere.</p>